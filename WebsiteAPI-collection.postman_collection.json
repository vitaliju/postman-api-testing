{
	"info": {
		"_postman_id": "fc1e0794-978d-420f-b4d2-49f39b2a4000",
		"name": "WebsiteAPI-collection",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "38004015"
	},
	"item": [
		{
			"name": "Get All Products List",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const responseData = pm.response.json();\r",
							"\r",
							"// Response status is 200\r",
							"pm.test(\"Response status code is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Check responseCode is 200\r",
							"pm.test(\"Returns responseCode 200\", () => {\r",
							"    pm.expect(responseData.responseCode).to.eq(200);\r",
							"});\r",
							"\r",
							"// Check that products list is not empty \r",
							"pm.test(\"Products list is not empty\", () => {\r",
							"  pm.expect(responseData.products).to.be.an('array').and.not.empty;\r",
							"   responseData.products.forEach(function (item) {  \r",
							"        pm.expect(item).to.have.property('id');\r",
							"        pm.expect(item).to.have.property('name');\r",
							"        pm.expect(item).to.have.property('price');\r",
							"        pm.expect(item).to.have.property('brand');\r",
							"        pm.expect(item).to.have.property('category');\r",
							"    });\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 2s\", () => {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(2000);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://automationexercise.com/api/productsList",
					"protocol": "https",
					"host": [
						"automationexercise",
						"com"
					],
					"path": [
						"api",
						"productsList"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get All Brands List",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const responseData = pm.response.json();\r",
							"\r",
							"// Response status is 200\r",
							"pm.test(\"Response status code is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Check responseCode is 200\r",
							"pm.test(\"Returns responseCode 200\", () => {\r",
							"    pm.expect(responseData.responseCode).to.eq(200);\r",
							"});\r",
							"\r",
							"// Check that Brands list is not empty and have properties 'id' and 'brand'\r",
							"pm.test(\"Brands list is not empty, have 'id' and 'brand' properties\", () => {\r",
							"  pm.expect(responseData.brands).to.be.an('array');\r",
							"  pm.expect(responseData.brands.length).to.be.at.least(1);\r",
							"  responseData.brands.forEach(function (item) {  \r",
							"        pm.expect(item).to.have.property('id');\r",
							"        pm.expect(item).to.have.property('brand');\r",
							"    });\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 2s\", () => {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(2000);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://automationexercise.com/api/brandsList",
					"protocol": "https",
					"host": [
						"automationexercise",
						"com"
					],
					"path": [
						"api",
						"brandsList"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login without email parameter",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const responseData = pm.response.json();\r",
							"// Response status is 200\r",
							"pm.test(\"Response status code is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// ResponseCode is 400\r",
							"pm.test(\"Returns responseCode 400\", () => {\r",
							"    pm.expect(responseData.responseCode).to.eq(400);\r",
							"});\r",
							"\r",
							"// Check that string \"Bad request, email or password parameter is missing in POST request.\" is returned\r",
							"pm.test(\"Returns correct message\", () => {\r",
							"    pm.expect(responseData.message).to.eq(\"Bad request, email or password parameter is missing in POST request.\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 2s\", () => {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(2000);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "password",
							"value": "123mmm",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "https://automationexercise.com/api/verifyLogin",
					"protocol": "https",
					"host": [
						"automationexercise",
						"com"
					],
					"path": [
						"api",
						"verifyLogin"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login with invalid details",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const responseData = pm.response.json();\r",
							"// Response status is 200\r",
							"pm.test(\"Response status code is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// ResponseCode is 404\r",
							"pm.test(\"Returns responseCode 404\", () => {\r",
							"    pm.expect(responseData.responseCode).to.eq(404);\r",
							"});\r",
							"\r",
							"// Check that string \"User not found!\" is returned\r",
							"pm.test(\"Returns correct message\", () => {\r",
							"    pm.expect(responseData.message).to.eq(\"User not found!\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 2s\", () => {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(2000);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "email",
							"value": "\"bit@89.com\"",
							"type": "text"
						},
						{
							"key": "password",
							"value": "\"456aaa\"",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "https://automationexercise.com/api/verifyLogin",
					"protocol": "https",
					"host": [
						"automationexercise",
						"com"
					],
					"path": [
						"api",
						"verifyLogin"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login with valid details",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "email",
							"value": "\"vitbit@89.com\"",
							"type": "text"
						},
						{
							"key": "password",
							"value": "\"456aaa\"",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "https://automationexercise.com/api/verifyLogin",
					"protocol": "https",
					"host": [
						"automationexercise",
						"com"
					],
					"path": [
						"api",
						"verifyLogin"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get user account detail by email",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://automationexercise.com/api/getUserDetailByEmail",
					"protocol": "https",
					"host": [
						"automationexercise",
						"com"
					],
					"path": [
						"api",
						"getUserDetailByEmail"
					]
				}
			},
			"response": []
		}
	]
}